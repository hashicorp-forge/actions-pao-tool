# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

name: CI Tests

on:
  push:

env:
  PAO_META: crt-pao-meta.zip # must match what's upoaded in collect/action.yml

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  install-csvkit:
    # Ideally this would be tested on a self-hosted runner,
    # but that's not available in this case.
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Install csvkit
        uses: ./install-csvkit/
      - name: Verify PATH
        run: |
          csvcut --version

  bats:
    runs-on: "ubuntu-latest"
    needs: [install-csvkit]
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: ./install-csvkit/
      - name: Install Bats and bats libs
        id: setup-bats
        uses: bats-core/bats-action@42fcc8700f773c075a16a90eb11674c0318ad507 # v3.0.1
        with:
          support-path: ${{ github.workspace }}/test/bats-support
          assert-path: ${{ github.workspace }}/test/bats-assert
          file-path: ${{ github.workspace }}/test/bats-file
      - name: Run bats tests
        env:
          BATS_LIB_PATH: ${{ steps.setup-bats.outputs.lib-path }}
        run: |
          echo "BATS_LIB_PATH: $BATS_LIB_PATH"
          bats -r tests

  test-collect:
    runs-on: "ubuntu-latest"
    needs: [install-csvkit]
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: ./install-csvkit/

      - name: Test Collection
        id: collect
        uses: ./collect/
      - name: Smoke Test Archive
        env:
          ARCHIVE: ${{ steps.collect.outputs.archive }}
          MANIFEST: archive.manifest.txt
        run: |
          /bin/ls -l "$ARCHIVE"
          unzip -l "$ARCHIVE" | tee "$MANIFEST"
          echo "Scanning for Getting Started guide(s)..."
          grep -i 'getting started' < "$MANIFEST"
          echo "Scanning for eBOM(s)..."
          grep 'eboms/.*\.csv$' < "$MANIFEST"

      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ env.PAO_META }}
      - name: Verify Attached Artifact
        env:
          ARCHIVE: ${{ steps.collect.outputs.archive }}
          RUN_ID: ${{ github.run_id }}
        run: |
          mkdir -p cmp/build cmp/fetch
          unzip -d cmp/build "$ARCHIVE"
          unzip -d cmp/fetch "$PAO_META"
          # check that the two have the same contents
          echo "Comparing built and fetched archives' contents"
          diff -qr cmp/build cmp/fetch

      - name: Test Verify Required Files
        uses: ./verify-required-files/
        with:
          product: nomad
          version: 1.10.1
          pao_meta_file: ${{ steps.collect.outputs.archive }}

  test-extract:
    runs-on: "ubuntu-latest"
    needs:
      - test-collect
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ env.PAO_META }}

      # test with specific output directory
      - name: Make Output Directory
        env:
          OUTPUT_DIR: "${{ runner.temp }}/explicit-output-dir"
        run: |
          mkdir -p "$OUTPUT_DIR"
      - uses: ./extract-meta-artifact/
        id: extract1
        with:
          archive: ${{ env.PAO_META }}
          output-dir: "${{ runner.temp }}/explicit-output-dir"
      - name: Validate Output Value
        env:
          EXP_DIR: "${{ runner.temp }}/explicit-output-dir"
          GOT_DIR: ${{ steps.extract1.outputs.output-dir }}
        run: |
          if [ "$GOT_DIR" != "$EXP_DIR" ]; then
            printf ".outputs.output-dir: expected [%s] but got [%s]\n" "$EXP_DIR" "$GOT_DIR" 1>&2
            exit 1
          fi
      - name: Show Extracted Data
        env:
          OUTPUT_DIR: "${{ runner.temp }}/explicit-output-dir"
        run: |
          find "$OUTPUT_DIR"

      # test with generated output directory
      - uses: ./extract-meta-artifact/
        id: extract2
        with:
          archive: ${{ env.PAO_META }}
      - name: Validate Output Value
        env:
          OUTPUT_DIR: ${{ steps.extract2.outputs.output-dir }}
        run: |
          if [ -z "$OUTPUT_DIR" ]; then
            printf ".outputs.output-dir: value was empty" 1>&2
            exit 1
          fi
      - name: Show Extracted Data
        env:
          OUTPUT_DIR: ${{ steps.extract2.outputs.output-dir }}
        run: |
          find "$OUTPUT_DIR"
  
  test-rename-by-part-number:
    runs-on: "ubuntu-latest"
    needs: [install-csvkit]
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Setup
        id: setup-part-number-rename
        run: |
          input_dir="$(mktemp -d)"
          output_dir="$(mktemp -d)"
          pao_meta_dir="$(mktemp -d)"
          echo "input-dir=$input_dir" | tee -a "$GITHUB_OUTPUT"
          echo "output-dir=$output_dir" | tee -a "$GITHUB_OUTPUT"

          cd tests/rename-by-part-number/testdata/input-happy-path
          cp -v ./* "${input_dir}/"

          cd ../pao-metadata-files/happy-path
          cp -rv ./* "${pao_meta_dir}/"
          printf "PAO directory contents: \n%s" "$(ls -lR "${pao_meta_dir}")"

          test -d "$output_dir" # verify the directory was created
      - name: Rename by Part Number
        uses: ./rename-by-part-number/
        with:
          pao_meta_dir: ${{ steps.setup-part-number-rename.outputs.pao-meta-dir }}
          input_dir: ${{ steps.setup-part-number-rename.outputs.input-dir }}
          output_dir: ${{ steps.setup-part-number-rename.outputs.output-dir }}
      - name: Verify Renamed Artifacts
        env:
          IN_DIR: ${{ steps.setup-part-number-rename.outputs.input-dir }}
          OUT_DIR: ${{ steps.setup-part-number-rename.outputs.output-dir }}
        run: |
          source scripts/utils.bash

          echo "$IN_DIR"
          find "$IN_DIR/"

          echo "$OUT_DIR"
          find "$OUT_DIR/"

          count_in="$(find "$IN_DIR/" -printf '.' | wc -l | xargs)"
          count_out="$(find "$OUT_DIR/" -printf '.' | wc -l | xargs)"
          if [ "$count_in" -ne "$count_out" ]; then
            err "Have $count_in input artifacts; expected same number output but instead got $count_out."
          fi

          # shellcheck disable=SC2012
          while read -r filename; do
            if [ -e "${OUT_DIR}/$filename" ]; then
              err "$filename: found artifact with same name in both input and output directories."
            fi
          done < <(ls -1 "$IN_DIR/")

          # spotcheck specific filename from eBOM
          if ! [ -e "${OUT_DIR}/MOOCOWA.zip" ]; then
            err "Expected MOOCOWA.zip in output directory."
          fi
          exit "$ERROR_COUNT"

  test-translate-short-names:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Setup
        id: setup
        run: |
          input_dir="$(mktemp -d)"
          output_dir="$(mktemp -d)"
          echo "input-dir=$input_dir" | tee -a "$GITHUB_OUTPUT"
          echo "output-dir=$output_dir" | tee -a "$GITHUB_OUTPUT"

          cd tests/translate-artifact-names/testdata/input/happy-path
          cp -v ./* "${input_dir}/"

          test -d "$output_dir" # verify the directory was created

      - name: Translate
        uses: ./translate-artifact-names
        with:
          input-dir: ${{ steps.setup.outputs.input-dir }}
          output-dir: ${{ steps.setup.outputs.output-dir }}

      # Check that we have the same number of artifacts in both dirs and than no artifact (name) is in both.
      # This is a bit crude, but:
      #   * it avoids duplicating the translation exactly (which masks bugs in the translator)
      #   * it avoids making the test brittle by hardcoding things
      - name: Verification
        env:
          IN_DIR: ${{ steps.setup.outputs.input-dir }}
          OUT_DIR: ${{ steps.setup.outputs.output-dir }}
        run: |
          source scripts/utils.bash

          echo "$IN_DIR"
          find "$IN_DIR/"

          echo "$OUT_DIR"
          find "$OUT_DIR/"

          count_in="$(find "$IN_DIR/" -printf '.' | wc -l | xargs)"
          count_out="$(find "$OUT_DIR/" -printf '.' | wc -l | xargs)"
          if [ "$count_in" -ne "$count_out" ]; then
            err "Have $count_in input artifacts; expected same number output but instead got $count_out."
          fi

          # shellcheck disable=SC2012
          while read -r filename; do
            if [ -e "${OUT_DIR}/$filename" ]; then
              err "$filename: found artifact with same name in both input and output directories."
            fi
          done < <(ls -1 "$IN_DIR/")

          exit "$ERROR_COUNT"
